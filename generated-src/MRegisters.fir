circuit MRegisters :
  module MRegisters :
    input clock : Clock
    input reset : UInt<1>
    output io : { flip clk : Clock, flip resetn : UInt<1>, flip mux_A : UInt<2>, flip mux_B : UInt<2>, flip sub_neg : UInt<1>, flip result_signed : UInt<1>, flip mux_R : UInt<3>, flip mux_D : UInt<3>, flip mux_Z : UInt<2>, flip rs1 : UInt<32>, flip rs2 : UInt<32>, flip rs1_neg : UInt<32>, flip rs2_neg : UInt<32>, flip sub_result : UInt<32>, flip alu_out : UInt<66>, A : SInt<33>, B : SInt<33>, R : UInt<32>, D : UInt<63>, Z : UInt<32>}

    reg R : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[register.scala 35:18]
    reg D : UInt<63>, clock with :
      reset => (reset, UInt<63>("h0")) @[register.scala 36:18]
    reg Z : UInt<32>, clock with :
      reset => (reset, UInt<32>("h0")) @[register.scala 37:18]
    reg A : SInt<33>, clock with :
      reset => (reset, asSInt(UInt<33>("h0"))) @[register.scala 38:18]
    reg B : SInt<33>, clock with :
      reset => (reset, asSInt(UInt<33>("h0"))) @[register.scala 39:18]
    wire next_R : UInt<32> @[register.scala 42:20]
    wire next_D : UInt<63> @[register.scala 43:20]
    wire next_Z : UInt<32> @[register.scala 44:20]
    wire next_A : SInt<33> @[register.scala 45:20]
    wire next_B : SInt<33> @[register.scala 46:20]
    next_R <= R @[register.scala 49:10]
    next_D <= D @[register.scala 50:10]
    next_Z <= Z @[register.scala 51:10]
    node _next_A_T = cat(UInt<1>("h0"), R) @[Cat.scala 31:58]
    node _next_A_T_1 = asSInt(_next_A_T) @[register.scala 52:30]
    next_A <= _next_A_T_1 @[register.scala 52:10]
    node _next_B_T = bits(D, 62, 31) @[register.scala 53:28]
    node _next_B_T_1 = cat(UInt<1>("h0"), _next_B_T) @[Cat.scala 31:58]
    node _next_B_T_2 = asSInt(_next_B_T_1) @[register.scala 53:38]
    next_B <= _next_B_T_2 @[register.scala 53:10]
    node _T = eq(UInt<3>("h0"), io.mux_R) @[register.scala 56:20]
    when _T : @[register.scala 56:20]
      next_R <= R @[register.scala 57:35]
    else :
      node _T_1 = eq(UInt<3>("h1"), io.mux_R) @[register.scala 56:20]
      when _T_1 : @[register.scala 56:20]
        next_R <= io.rs1 @[register.scala 58:35]
      else :
        node _T_2 = eq(UInt<3>("h2"), io.mux_R) @[register.scala 56:20]
        when _T_2 : @[register.scala 56:20]
          next_R <= io.rs1_neg @[register.scala 59:35]
        else :
          node _T_3 = eq(UInt<3>("h3"), io.mux_R) @[register.scala 56:20]
          when _T_3 : @[register.scala 56:20]
            node _next_R_T = mux(io.sub_neg, R, io.sub_result) @[register.scala 60:41]
            next_R <= _next_R_T @[register.scala 60:35]
          else :
            node _T_4 = eq(UInt<3>("h4"), io.mux_R) @[register.scala 56:20]
            when _T_4 : @[register.scala 56:20]
              node _next_R_T_1 = bits(io.alu_out, 31, 0) @[register.scala 61:48]
              next_R <= _next_R_T_1 @[register.scala 61:35]
    node _T_5 = eq(UInt<3>("h0"), io.mux_D) @[register.scala 64:20]
    when _T_5 : @[register.scala 64:20]
      next_D <= D @[register.scala 65:30]
    else :
      node _T_6 = eq(UInt<3>("h1"), io.mux_D) @[register.scala 64:20]
      when _T_6 : @[register.scala 64:20]
        node _next_D_T = cat(io.rs2, UInt<31>("h0")) @[Cat.scala 31:58]
        next_D <= _next_D_T @[register.scala 66:30]
      else :
        node _T_7 = eq(UInt<3>("h2"), io.mux_D) @[register.scala 64:20]
        when _T_7 : @[register.scala 64:20]
          node _next_D_T_1 = cat(io.rs2_neg, UInt<31>("h0")) @[Cat.scala 31:58]
          next_D <= _next_D_T_1 @[register.scala 67:30]
        else :
          node _T_8 = eq(UInt<3>("h3"), io.mux_D) @[register.scala 64:20]
          when _T_8 : @[register.scala 64:20]
            node _next_D_T_2 = bits(D, 62, 1) @[register.scala 68:48]
            node _next_D_T_3 = cat(UInt<1>("h0"), _next_D_T_2) @[Cat.scala 31:58]
            next_D <= _next_D_T_3 @[register.scala 68:30]
          else :
            node _T_9 = eq(UInt<3>("h4"), io.mux_D) @[register.scala 64:20]
            when _T_9 : @[register.scala 64:20]
              node next_D_hi = cat(UInt<5>("h16"), UInt<14>("h3001")) @[Cat.scala 31:58]
              node _next_D_T_4 = cat(next_D_hi, UInt<5>("h1b")) @[Cat.scala 31:58]
              next_D <= _next_D_T_4 @[register.scala 69:30]
    node _T_10 = eq(UInt<2>("h0"), io.mux_Z) @[register.scala 72:20]
    when _T_10 : @[register.scala 72:20]
      next_Z <= Z @[register.scala 73:32]
    else :
      node _T_11 = eq(UInt<2>("h1"), io.mux_Z) @[register.scala 72:20]
      when _T_11 : @[register.scala 72:20]
        next_Z <= UInt<1>("h0") @[register.scala 74:32]
      else :
        node _T_12 = eq(UInt<2>("h2"), io.mux_Z) @[register.scala 72:20]
        when _T_12 : @[register.scala 72:20]
          node _next_Z_T = bits(Z, 30, 0) @[register.scala 75:40]
          node _next_Z_T_1 = eq(io.sub_neg, UInt<1>("h0")) @[register.scala 75:49]
          node _next_Z_T_2 = cat(_next_Z_T, _next_Z_T_1) @[Cat.scala 31:58]
          next_Z <= _next_Z_T_2 @[register.scala 75:32]
        else :
          node _T_13 = eq(UInt<2>("h3"), io.mux_Z) @[register.scala 72:20]
          when _T_13 : @[register.scala 72:20]
            node _next_Z_T_3 = bits(io.alu_out, 65, 65) @[register.scala 77:53]
            node _next_Z_T_4 = bits(io.alu_out, 62, 32) @[register.scala 77:69]
            node _next_Z_T_5 = cat(_next_Z_T_3, _next_Z_T_4) @[Cat.scala 31:58]
            node _next_Z_T_6 = bits(io.alu_out, 63, 32) @[register.scala 77:90]
            node _next_Z_T_7 = mux(io.result_signed, _next_Z_T_5, _next_Z_T_6) @[register.scala 77:20]
            next_Z <= _next_Z_T_7 @[register.scala 77:14]
    node _T_14 = eq(UInt<2>("h0"), io.mux_A) @[register.scala 81:20]
    when _T_14 : @[register.scala 81:20]
      node _next_A_T_2 = cat(UInt<1>("h0"), R) @[Cat.scala 31:58]
      node _next_A_T_3 = asSInt(_next_A_T_2) @[register.scala 82:55]
      next_A <= _next_A_T_3 @[register.scala 82:35]
    else :
      node _T_15 = eq(UInt<2>("h1"), io.mux_A) @[register.scala 81:20]
      when _T_15 : @[register.scala 81:20]
        node _next_A_T_4 = bits(R, 31, 31) @[register.scala 83:43]
        node _next_A_T_5 = cat(_next_A_T_4, R) @[Cat.scala 31:58]
        node _next_A_T_6 = asSInt(_next_A_T_5) @[register.scala 83:52]
        next_A <= _next_A_T_6 @[register.scala 83:35]
      else :
        node _T_16 = eq(UInt<2>("h2"), io.mux_A) @[register.scala 81:20]
        when _T_16 : @[register.scala 81:20]
          next_A <= asSInt(UInt<1>("h0")) @[register.scala 84:35]
        else :
          node _T_17 = eq(UInt<2>("h3"), io.mux_A) @[register.scala 81:20]
          when _T_17 : @[register.scala 81:20]
            next_A <= A @[register.scala 85:35]
    node _T_18 = eq(UInt<2>("h0"), io.mux_B) @[register.scala 88:20]
    when _T_18 : @[register.scala 88:20]
      node _next_B_T_3 = bits(D, 62, 62) @[register.scala 89:53]
      node _next_B_T_4 = cat(UInt<1>("h0"), _next_B_T_3) @[Cat.scala 31:58]
      node _next_B_T_5 = asSInt(_next_B_T_4) @[register.scala 89:59]
      next_B <= _next_B_T_5 @[register.scala 89:35]
    else :
      node _T_19 = eq(UInt<2>("h1"), io.mux_B) @[register.scala 88:20]
      when _T_19 : @[register.scala 88:20]
        node _next_B_T_6 = bits(D, 62, 62) @[register.scala 90:43]
        node _next_B_T_7 = bits(D, 62, 62) @[register.scala 90:50]
        node _next_B_T_8 = cat(_next_B_T_6, _next_B_T_7) @[Cat.scala 31:58]
        node _next_B_T_9 = asSInt(_next_B_T_8) @[register.scala 90:56]
        next_B <= _next_B_T_9 @[register.scala 90:35]
      else :
        node _T_20 = eq(UInt<2>("h2"), io.mux_B) @[register.scala 88:20]
        when _T_20 : @[register.scala 88:20]
          next_B <= asSInt(UInt<1>("h0")) @[register.scala 91:35]
        else :
          node _T_21 = eq(UInt<2>("h3"), io.mux_B) @[register.scala 88:20]
          when _T_21 : @[register.scala 88:20]
            next_B <= B @[register.scala 92:35]
    node _T_22 = eq(io.resetn, UInt<1>("h0")) @[register.scala 96:8]
    when _T_22 : @[register.scala 96:20]
      R <= UInt<1>("h0") @[register.scala 97:7]
      D <= UInt<1>("h0") @[register.scala 98:7]
      Z <= UInt<1>("h0") @[register.scala 99:7]
      A <= asSInt(UInt<1>("h0")) @[register.scala 100:7]
      B <= asSInt(UInt<1>("h0")) @[register.scala 101:7]
    else :
      R <= next_R @[register.scala 103:7]
      D <= next_D @[register.scala 104:7]
      Z <= next_Z @[register.scala 105:7]
      A <= next_A @[register.scala 106:7]
      B <= next_B @[register.scala 107:7]
    io.R <= R @[register.scala 111:8]
    io.D <= D @[register.scala 112:8]
    io.Z <= Z @[register.scala 113:8]
    io.A <= A @[register.scala 114:8]
    io.B <= B @[register.scala 115:8]

